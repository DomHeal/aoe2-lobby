{"version":3,"sources":["Friends.js","Lobbies.js","Home.js","About.js","Navigation.js","App.js","serviceWorker.js","index.js"],"names":["friendsList","Friends","useState","results","setResults","isLoading","setIsLoading","useEffect","interval","setInterval","console","log","fetch","headers","then","res","json","result","x","found","players","filter","playe","includes","name","push","error","clearInterval","Spinner","type","color","Table","size","map","key","match_uuid","scope","Button","onClick","lobby_id","url","i","document","createElement","style","display","src","onload","parentNode","removeChild","body","appendChild","joinLobby","player","game_type","mapGameTypeComponent","num_players","num_slots","map_type","mapSizeComponent","map_size","server","average_rating","credentials","has_password","Home","About","Navigation","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","NavItem","to","path","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f31ff59a.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Button, Spinner, Table} from 'reactstrap';\nimport './App.css';\n\nconst friendsList = [\n    \"Xeon\",\n    \"methaddict\",\n    \"Welshwonder\"\n];\nexport default function Friends() {\n    const [results, setResults] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            console.log('searching for lobbies')\n            fetch(\"https://aoe2.net/api/lobbies?game=aoe2de\", {\n                headers: {\n                    'Access-Control-Allow-Origin': '*'\n                },\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        console.log(result)\n                        const x = [];\n                        for (const res of results) {\n                            const found = res.players.filter(playe => friendsList.includes(playe.name));\n                            if (found > 0){\n                                console.log(\"friend found\");\n                                x.push(found)\n                            }\n                        }\n\n                        setResults(x);\n                        setIsLoading(false)\n                    },\n                    (error) => {\n                        console.error(error)\n                    }\n                )\n        }, 5000);\n        return () => clearInterval(interval);\n\n    });\n\n    const joinLobby = (lobby_id) => {\n        let url = \"steam://joinlobby/813780/\" + lobby_id;\n        console.log('Attempting to join lobby - ' + url)\n        let i = document.createElement('iframe');\n        i.style.display = 'none';\n        i.src = url;\n        i.onload = function () {\n            i.parentNode.removeChild(i);\n        };\n        document.body.appendChild(i)\n    };\n\n    const mapGameTypeComponent = (game_type) => {\n\n        switch (game_type) {\n            case 0:\n                return \"Random Map\";\n            case 1:\n                return \"Regicide\";\n            case 2:\n                return \"Deathmatch\";\n            case 3:\n                return \"Scenario\";\n            case 13:\n                return \"Empire Wars\";\n            default:\n                return game_type\n        }\n    };\n\n    const mapSizeComponent = (size) => {\n\n        switch (size) {\n            case 0:\n                return \"Tiny\";\n            case 1:\n                return \"Small\";\n            case 2:\n                return \"Medium\";\n            case 3:\n                return \"Normal\";\n            case 4:\n                return \"Large\";\n            case 5:\n                return \"Giant\";\n            case 6:\n                return \"Luda\";\n            default:\n                return size\n        }\n    };\n\n    if (isLoading) {\n        return <>\n            <Spinner type=\"grow\" color=\"light\"/>\n            <p>Finding friends...</p>\n        </>\n    }\n    return <>\n        <Table size={'sm'}>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>Friend</th>\n                <th>Type</th>\n                <th>Name</th>\n                <th>Players</th>\n                <th>Map</th>\n                <th>Server</th>\n                <th>Average Rating</th>\n            </tr>\n            </thead>\n            <tbody>\n            {results.map(result => {\n                return <tr key={result.match_uuid}>\n                    <th scope=\"row\"><Button onClick={() => joinLobby(result.lobby_id)}>Join</Button></th>\n                    <td>{result.players.map(player => <p>{player.name}</p>)}</td>\n                    <td>{mapGameTypeComponent(result.game_type)}</td>\n                    <td>{result.name}</td>\n                    <td>{result.num_players + '/' + result.num_slots}</td>\n                    <td>{result.map_type} - ({mapSizeComponent(result.map_size)})</td>\n                    <td>{result.server}</td>\n                    <td>{result.average_rating}</td>\n                </tr>\n            })}\n\n            </tbody>\n        </Table>\n    </>\n\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Button, Spinner, Table} from 'reactstrap';\nimport './App.css';\n\nexport default function Friends() {\n    const [results, setResults] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        const interval = setInterval(() => {\n            console.log('searching for lobbies')\n            fetch(\"https://aoe2.net/api/lobbies?game=aoe2de\", {\n                credentials: \"include\",\n                headers: {\n                    'Access-Control-Allow-Origin': '*'\n                },\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result)\n                        setIsLoading(false)\n                    },\n                    (error) => {\n                        console.error(error)\n                    }\n                )\n        }, 5000);\n        return () => clearInterval(interval);\n\n    }, []);\n\n    const joinLobby = (lobby_id) => {\n        let url = \"steam://joinlobby/813780/\" + lobby_id;\n        console.log('Attempting to join lobby - ' + url)\n        let i = document.createElement('iframe');\n        i.style.display = 'none';\n        i.src = url;\n        i.onload = function () {\n            i.parentNode.removeChild(i);\n        };\n        document.body.appendChild(i)\n    };\n\n    const mapGameTypeComponent = (game_type) => {\n\n        switch (game_type) {\n            case 0:\n                return \"Random Map\";\n            case 1:\n                return \"Regicide\";\n            case 2:\n                return \"Deathmatch\";\n            case 3:\n                return \"Scenario\";\n            case 13:\n                return \"Empire Wars\";\n            default:\n                return game_type\n        }\n    };\n\n    const mapSizeComponent = (size) => {\n\n        switch (size) {\n            case 0:\n                return \"Tiny\";\n            case 1:\n                return \"Small\";\n            case 2:\n                return \"Medium\";\n            case 3:\n                return \"Normal\";\n            case 4:\n                return \"Large\";\n            case 5:\n                return \"Giant\";\n            case 6:\n                return \"Luda\";\n            default:\n                return size\n        }\n    };\n\n    if (isLoading) {\n        return <>\n            <Spinner type=\"grow\" color=\"light\"/>\n            <p>Loading lobbies...</p>\n        </>\n    }\n    return <>\n        <Table size={'sm'}>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>Type</th>\n                <th>Name</th>\n                <th>Players</th>\n                <th>Map</th>\n                <th>Server</th>\n                <th>Average Rating</th>\n            </tr>\n            </thead>\n            <tbody>\n            {results.map(result => {\n                console.log(result)\n                if (result.num_players === result.num_slots) {\n                    return null\n                }\n                if (result.server !== 'westeurope' && result.server !== 'ukwest') {\n                    return null\n                }\n                if (result.has_password) {\n                    return null\n                }\n                return <tr key={result.match_uuid}>\n                    <th scope=\"row\"><Button onClick={() => joinLobby(result.lobby_id)}>Join</Button></th>\n                    <td>{mapGameTypeComponent(result.game_type)}</td>\n                    <td>{result.name}</td>\n                    <td>{result.num_players + '/' + result.num_slots}</td>\n                    <td>{result.map_type} - ({mapSizeComponent(result.map_size)})</td>\n                    <td>{result.server}</td>\n                    <td>{result.average_rating}</td>\n                </tr>\n            })}\n\n            </tbody>\n        </Table>\n    </>\n\n}\n","import React from \"react\";\nimport './App.css';\n\nexport default function Home() {\n    return <>\n    </>\n\n}\n","import React from \"react\";\nimport './App.css';\n\nexport default function About() {\n    return <>\n        Github URL: www.github.com/domheal/aoe2-lobby\n    </>\n\n}\n","import React from \"react\";\nimport {Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem} from 'reactstrap';\nimport './App.css';\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport Friends from \"./Friends\";\nimport Lobbies from \"./Lobbies\";\nimport Home from \"./Home\";\nimport About from \"./About\";\n\nexport default function Navigation() {\n\n    return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">AoE2:DE</NavbarBrand>\n                <NavbarToggler/>\n                <Collapse navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem className=\"pr-2\">\n                            <Link to=\"/\">Home</Link>\n                        </NavItem>\n                        <NavItem className=\"pr-2\">\n                            <Link to=\"/friends\">Friends</Link>\n                        </NavItem>\n                        <NavItem className=\"pr-2\">\n                            <Link to=\"/lobbies\">Lobbies</Link>\n                        </NavItem>\n                        <NavItem className=\"pr-2\">\n                            <Link to=\"/about\">About</Link>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n            <Switch>\n                <Route path=\"/friends\">\n                    <Friends/>\n                </Route>\n                <Route path=\"/lobbies\">\n                    <Lobbies/>\n                </Route>\n                <Route path=\"/\">\n                    <Home/>\n                </Route>\n                <Route path=\"/about\">\n                    <About/>\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Navigation from \"./Navigation\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nfunction App() {\n    return (\n        <HashRouter basename='/'>\n            <div className=\"App\">\n                <Navigation/>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}